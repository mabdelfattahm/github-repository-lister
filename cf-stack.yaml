AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation script for deploying github-lister image"
Parameters:
 ExecutionRole:
  Type: String
  Description: Execution role Arn
 ContainerImage:
  Type: String
  Description: Github lister container image
 AwsLogsGroup:
  Type: String
  Default: "aws-logs-github-lister"
  Description: Aws logs group name
 GithubAccessToken:
   Type: String
   Description: Github access token image
 VpcId:
  Type: String
  Description: VPC Id
 SubnetOne:
  Type: String
  Description: First Subnet Id
 SubnetTwo:
  Type: String
  Description: Second Subnet Id

Resources:
 GithubListerLogsGroup:
  Type: 'AWS::Logs::LogGroup'
  Properties:
   LogGroupName: !Ref AwsLogsGroup
   RetentionInDays: 3
 GithubListerTask:
  Type: AWS::ECS::TaskDefinition
  Properties:
   RequiresCompatibilities:
    - "FARGATE"
   ExecutionRoleArn: !Ref ExecutionRole
   Cpu: 256
   Memory: 512
   NetworkMode: "awsvpc"
   RuntimePlatform:
    OperatingSystemFamily: "LINUX"
    CpuArchitecture: "ARM64"
   ContainerDefinitions:
    - Name: "github-lister"
      Image: !Ref ContainerImage
      MemoryReservation: 256
      Memory: 512
      Environment:
       - Name: "github.api.accessToken"
         Value: !Ref GithubAccessToken
      LogConfiguration:
       LogDriver: "awslogs"
       Options:
        awslogs-group: !Ref AwsLogsGroup
        awslogs-region: !Ref 'AWS::Region'
        awslogs-stream-prefix: "github-lister"
      PortMappings:
       - ContainerPort: 8080
         Protocol: tcp
 EcsCluster:
  Type: 'AWS::ECS::Cluster'
  Properties:
   ClusterName: FargateCluster
 FargateAlb:
  Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  Properties:
   Name: FargateAlb
   Subnets:
    - !Ref SubnetOne
    - !Ref SubnetTwo
   Type: application
   SecurityGroups:
    - !GetAtt FargateAlbSG.GroupId
 FargateTargetGroup:
  Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  Properties:
   Name: FargateTargetGroup
   VpcId: !Ref VpcId
   Protocol: HTTP
   Port: 8080
   HealthCheckPath: /actuator
   TargetType: ip
 AlbListener:
  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  Properties:
   DefaultActions:
    - TargetGroupArn: !Ref FargateTargetGroup
      Type: forward
   LoadBalancerArn: !Ref FargateAlb
   Port: 80
   Protocol: HTTP
 FargateAlbSG:
  Type: 'AWS::EC2::SecurityGroup'
  Properties:
   GroupDescription: SG for the Fargate ALB
   GroupName: FargateAlbSG
   SecurityGroupIngress:
    - CidrIpv6: ::/0
      FromPort: 80
      ToPort: 80
      IpProtocol: TCP
      Description: 'Inbound rule for IPv6 traffic'
    - CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80
      IpProtocol: TCP
      Description: 'Inbound rule for IPv4 traffic'
 Alb2FargateContainers:
  Type: 'AWS::EC2::SecurityGroup'
  Properties:
   GroupDescription: SG for traffic between ALB and containers
   GroupName: Alb2FargateContainers
   SecurityGroupIngress:
    - IpProtocol: -1
      SourceSecurityGroupId: !GetAtt FargateAlbSG.GroupId
      Description: 'Inbound rule for all traffic'
 EcsService:
  Type: AWS::ECS::Service
  DependsOn:
   - AlbListener
  Properties:
   LaunchType: FARGATE
   Cluster: !Ref EcsCluster
   DesiredCount: 2
   TaskDefinition: !Ref GithubListerTask
   DeploymentConfiguration:
    MaximumPercent: 100
    MinimumHealthyPercent: 0
   NetworkConfiguration:
    AwsvpcConfiguration:
     AssignPublicIp: ENABLED
     SecurityGroups:
      - !GetAtt Alb2FargateContainers.GroupId
     Subnets:
      - !Ref SubnetOne
      - !Ref SubnetTwo
   LoadBalancers:
    - TargetGroupArn: !Ref FargateTargetGroup
      ContainerPort: 8080
      ContainerName: github-lister
 Api:
  Type: 'AWS::ApiGateway::RestApi'
  Properties:
   Name: alb-rest-api
   Description: Rest API Gateway
 ApiResource:
  Type: 'AWS::ApiGateway::Resource'
  Properties:
   ParentId: !GetAtt Api.RootResourceId
   RestApiId: !Ref Api
   PathPart: '{proxy+}'
 ApiProxyMethod:
  Type: 'AWS::ApiGateway::Method'
  Properties:
   HttpMethod: ANY
   ResourceId: !Ref ApiResource
   RestApiId: !Ref Api
   AuthorizationType: NONE
   RequestParameters:
    method.request.path.proxy: true
   Integration:
    CacheKeyParameters:
     - 'method.request.path.proxy'
    RequestParameters:
     integration.request.path.proxy: 'method.request.path.proxy'
    IntegrationHttpMethod: ANY
    Type: HTTP_PROXY
    Uri: !Sub "http://${FargateAlb.DNSName}/{proxy}"
    PassthroughBehavior: WHEN_NO_MATCH
 ApiDeployment:
  DependsOn:
   - ApiProxyMethod
  Type: 'AWS::ApiGateway::Deployment'
  Properties:
   RestApiId: !Ref Api
   StageName: dev
Outputs:
 GithubListerStackApiGatewayUrl:
  Description: The URL of the API gateway
  Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  Export:
    Name: GithubListerStackApiGatewayUrl